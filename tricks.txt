#Iterate through reversed list and 

for index, element in reversed(enumerate(d)):
    #iterate through a reversed list and print the index, elemnet after reversed

for index, element in reversed(list(enumerate(d))):
    #iterate through a reversed list and print the original index, element before reversing

#when iterating through some loop and accessing indexes of array elemnets
#have the iterator variable = the current iteration, it becomes simpler to think about


#dont splice list when you need to maintain its index

#iterate through a dictionary doing the following
#python3
for key, value in d.items():
    print(key)
    print(value)


you cant do this 
element = "4 5 6"
[int(d), b , c] = element.split()
you have to cast d after

#ALso remember that when you are doing division in python3 7/2 will equal 3.5 and not 3, which is not the case in python2

if you would like to join several elements in a list together and form a string with dashes in the middle

d=['a','b','c']
'-'.join(d)

#returns all the elements in the array after and including the first element
d[1:]
#returns index 0 and index 1 of d
d[0:2]
#returns index 0 and 1 of d
d[:2]
#iterates through elemnets 0, 6 by values of 2
range(0, 6, 2) 


Scope:
    variables declared inside an if statement, while and for loops are still assigned to the functiono, class or module unlike java. A variable not existing yet is different from it being None. for example. A name error is thrown if a variable doesnt exist and tries to be used

#In this case a is not defined at all and a Name Error is thrown because it doesnt exist. One can always use a try and except block to atch the NameError but rather it is cleaner to define a to be None prior.
if (not a):
    d = c*y

a = None
if not a:
    d = c*y
