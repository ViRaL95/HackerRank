Asearch insertion and remove are all O(log n) 
In worth case tese are all 0(n) however we can avoid the worst case by keeping the binary search tree balanced. Binary search tree is a binary tree for in which each node, value of all the nodes in leftsubtree are less than or equal and all the nodes in the right subtree are greater

Why is a binary search tree log n base 2 time

The reason why is this consider the array [8 10 12 15 17 20 25] and we performed binary search on the array for element 10. We would split the element in half and the remaining array is now [8 10 12] We now split it again and we find the leement. We had to take 3 steps and 2^3 ~ 7 this is why this is a log n search

We call a tree balanced if for all nodes the differnces in height of the left subtree and the right subtree are not greater than 1.. therefore when we start. You can have essentially a linked list and it is sitll considered a binary search tree but is not balanced then retrieval insertion and deletion of an elmeent is now 0(n). The reason for something to be balanced is when we move to an ode we cut the amount of data in half. If a tree is unbalanced this doesnt happen. 

Binary search tree gets unbalanced often after insertion and deletion you have to re balance it

Height of a node is the number of edges in longest path from the node to a leaf node. A tree with only one node has height of 0. 

In order to find the height of a tree you have to take the maximum of the height of the left subtree and the right subtree

height of an empty tree is -1 btw

When finding the height of the tree in code understand that that the height of a node is the maximum between the height of the left subtree and right subtree. In order to better understand how to think of an algorithm like this see how it would work for a leaf. A leaf has height of 0, when root.left and root.right is called there should be a check to see if the root node is None. If it is one should ensure that an operation occurs such that the height of that node is now 0. If -1 is returned when the node is none one can account for the connection between itself and its parent by adding 1.
